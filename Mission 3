Test your original function with a few different sets of words to try to find some ways your function breaks. Edit your function so it is more robust.

For example, think about capitalization. We probably want to find questions that contain the word "King" or "king".

You may also want to check to make sure you don't find rows that contain substrings of your given words. For example, our function found a question that didn't contain the word "king", however it did contain the word "viking" — it found the "king" inside "viking". 
Note that this also comes with some drawbacks — you would no longer find questions that contained words like "England's".

_________________________________

import pandas as pd
import re

def count_questions_with_exact_words(df, column_name, search_words):
    """
    Counts the number of rows where ALL search words appear exactly (ignoring case).
    Returns both the count and the filtered DataFrame.
    """
    # Ensure the column contains strings and remove NaN values
    df = df.dropna(subset=[column_name])
    df[column_name] = df[column_name].astype(str)

    # Create a regex pattern for each word, ensuring exact word matches and ignoring case
    search_patterns = [rf"\b{re.escape(word)}\b" for word in search_words]

    # Check if ALL search terms are present in the text (case-insensitive)
    def match_exact(text):
        return all(re.search(pattern, text, re.IGNORECASE) for pattern in search_patterns)

    mask = df[column_name].apply(match_exact)
    
    return mask.sum(), df[mask]  # Return count and filtered DataFrame

# Funktion aufrufen und die Anzahl speichern
count_result = count_questions_with_exact_words(jeopardy, "Question", ["King", "England"])



# Den Count ausgeben
print(f"Anzahl der betroffenen Datensätze: {count_result}")

print(filtered_questions_df)
